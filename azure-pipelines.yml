# Xamarin.Android and Xamarin.iOS
# Build a Xamarin.Android or Xamarin.iOS project.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xamarin

#Android
jobs:
- job: Android
  pool:
    vmImage: 'macos-latest'

  variables:
    buildConfiguration: 'Release'
    outputDirectory: '$(build.binariesDirectory)/$(buildConfiguration)'

  steps:
  - task: NuGetToolInstaller@0

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '**/*.sln'

  - task: XamarinAndroid@1
    inputs:
      projectFile: '**/*droid*.csproj'
      outputDirectory: '$(outputDirectory)'
      configuration: '$(buildConfiguration)'

  - task: AndroidSigning@3
    inputs:
      apkFiles: '**/*.apk'
      apksignerKeystoreFile: 'Pipston17.keystore'
      apksignerKeystorePassword: '$(keystore-password)'
      apksignerKeystoreAlias: '$(keystore-alias)'
      apksignerKeyPassword: '$(keystore-key-password)'
    env:
      Secret_Environment: $(Secret_Environment)

#iOS
- job: iOS
  pool:
    vmImage: 'macos-latest'

  steps:
  # To manually select a Xamarin SDK version on the Microsoft-hosted macOS agent,
  # configure this task with the *Mono* version that is associated with the
  # Xamarin SDK version that you need, and set the "enabled" property to true.
  # See https://go.microsoft.com/fwlink/?linkid=871629
  - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh 5_12_0
    displayName: 'Select the Xamarin SDK version'
    enabled: false

  - task: NuGetToolInstaller@0

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '**/*.sln'

  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'Certificates.p12'
      certPwd: '$(p12-password)'
      keychain: 'temp'

  - task: InstallAppleProvisioningProfile@1
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: 'PayslipsIphone.mobileprovision'

  - task: XamariniOS@2
    inputs:
      solutionFile: '**/*.sln'
      configuration: 'Ad-Hoc'
      buildForSimulator: false
      packageApp: true
    env:
      Secret_Environment: $(Secret_Environment)
